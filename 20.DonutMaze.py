import datetime
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
from itertools import combinations

exec_part = 2 # which part to execute
exec_test_case = 0 # 1 = test input; 0 = real puzzle input

# Puzzle input
# INPUT_TEST = '''         A           
#          A           
#   #######.#########  
#   #######.........#  
#   #######.#######.#  
#   #######.#######.#  
#   #######.#######.#  
#   #####  B    ###.#  
# BC...##  C    ###.#  
#   ##.##       ###.#  
#   ##...DE  F  ###.#  
#   #####    G  ###.#  
#   #########.#####.#  
# DE..#######...###.#  
#   #.#########.###.#  
# FG..#########.....#  
#   ###########.#####  
#              Z       
#              Z       '''
# INPUT_TEST = '''                   A               
#                    A               
#   #################.#############  
#   #.#...#...................#.#.#  
#   #.#.#.###.###.###.#########.#.#  
#   #.#.#.......#...#.....#.#.#...#  
#   #.#########.###.#####.#.#.###.#  
#   #.............#.#.....#.......#  
#   ###.###########.###.#####.#.#.#  
#   #.....#        A   C    #.#.#.#  
#   #######        S   P    #####.#  
#   #.#...#                 #......VT
#   #.#.#.#                 #.#####  
#   #...#.#               YN....#.#  
#   #.###.#                 #####.#  
# DI....#.#                 #.....#  
#   #####.#                 #.###.#  
# ZZ......#               QG....#..AS
#   ###.###                 #######  
# JO..#.#.#                 #.....#  
#   #.#.#.#                 ###.#.#  
#   #...#..DI             BU....#..LF
#   #####.#                 #.#####  
# YN......#               VT..#....QG
#   #.###.#                 #.###.#  
#   #.#...#                 #.....#  
#   ###.###    J L     J    #.#.###  
#   #.....#    O F     P    #.#...#  
#   #.###.#####.#.#####.#####.###.#  
#   #...#.#.#...#.....#.....#.#...#  
#   #.#####.###.###.#.#.#########.#  
#   #...#.#.....#...#.#.#.#.....#.#  
#   #.###.#####.###.###.#.#.#######  
#   #.#.........#...#.............#  
#   #########.###.###.#############  
#            B   J   C               
#            U   P   P               '''
INPUT_TEST = '''             Z L X W       C                 
             Z P Q B       K                 
  ###########.#.#.#.#######.###############  
  #...#.......#.#.......#.#.......#.#.#...#  
  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  
  #.#...#.#.#...#.#.#...#...#...#.#.......#  
  #.###.#######.###.###.#.###.###.#.#######  
  #...#.......#.#...#...#.............#...#  
  #.#########.#######.#.#######.#######.###  
  #...#.#    F       R I       Z    #.#.#.#  
  #.###.#    D       E C       H    #.#.#.#  
  #.#...#                           #...#.#  
  #.###.#                           #.###.#  
  #.#....OA                       WB..#.#..ZH
  #.###.#                           #.#.#.#  
CJ......#                           #.....#  
  #######                           #######  
  #.#....CK                         #......IC
  #.###.#                           #.###.#  
  #.....#                           #...#.#  
  ###.###                           #.#.#.#  
XF....#.#                         RF..#.#.#  
  #####.#                           #######  
  #......CJ                       NM..#...#  
  ###.#.#                           #.###.#  
RE....#.#                           #......RF
  ###.###        X   X       L      #.#.#.#  
  #.....#        F   Q       P      #.#.#.#  
  ###.###########.###.#######.#########.###  
  #.....#...#.....#.......#...#.....#.#...#  
  #####.#.###.#######.#######.###.###.#.#.#  
  #.......#.......#.#.#.#.#...#...#...#.#.#  
  #####.###.#####.#.#.#.#.###.###.#.###.###  
  #.......#.....#.#...#...............#...#  
  #############.#.#.###.###################  
               A O F   N                     
               A A D   M                     '''           
INPUT = '''                                             L   O   Z     Y     A H           O       T                                           
                                             D   L   Z     U     R V           R       E                                           
  ###########################################.###.###.#####.#####.#.###########.#######.#########################################  
  #.#.#.#.............#.#.......#...#...#.......#...#...#...#.#...#.....#.....#.#.........#.....#.........#.....#.........#.....#  
  #.#.#.###.###.#####.#.#.#####.###.###.#######.#.#.###.#.###.###.#.###.###.#.#.#.###.###.#.#####.###.###.###.###.#.###.#######.#  
  #.#.#.....#...#.........#.....#...#.....#.....#.#...#.#.......#...#...#.#.#.#.#...#...#...#.#...#.#.#...#.......#.#...#...#.#.#  
  #.#.#.###.#######.#.#.#######.###.###.###.#####.###.#.###.###.#####.###.#.#.#.#.###.###.###.###.#.#.#.#.#####.#########.###.#.#  
  #.....#...#...#...#.#.#.......#.....#.#...#...#...#.....#.#...#...#...#...#.#.#.#.....#.........#.#.#.#.#.#.....#.......#.....#  
  #.#.###.#.#.#############.###.#####.#.#.###.#.###.###.#######.#.#.###.#.###.#.#.###.#.#.#.#.#####.#######.###.#######.###.###.#  
  #.#.#...#.#.#.#.#.....#.#.#.#.............#.#.#.....#.#.......#.#.....#...#.#.#.#.#.#.#.#.#.............#.#...#.#.#.#...#.#...#  
  ###.###.#.#.#.#.#####.#.###.#.###########.#.#.#.#########.###.#.#.#######.#.#.#.#.#########.#.###.#######.###.#.#.#.#.###.#.#.#  
  #...#.#.#.#...#.#.#.#...#.....#...#.........#.#.#.#...#.#.#...#.#.#...#...#...#...........#.#...#...#.#.#.....#.#...#...#.#.#.#  
  ###.#.#####.###.#.#.###.#.#.#.#.#####.###.###.#.#.#.###.#####.#.###.#.#.#####.#.#.#########.#######.#.#.###.###.#.###.#######.#  
  #.....#.#.#.......#.#.....#.#.#.....#...#...#.#.....#...#.#...#.#...#.#.....#.#.#.#.....#.#...#...#.#.#.#.....#.....#.......#.#  
  #.#####.#.###.#.#.#.#.#.#.#####.#.#.#####.###.#.#####.###.#.#.#.#.###.#.#######.#####.###.#####.#####.#.#.#.###.#######.#####.#  
  #.#.....#...#.#.#...#.#.#.#.#...#.#.........#.#.#.#...#.#.#.#.#.#...#.#.....#.........#...#...#.#.#.#.#...#.#.....#.#.....#...#  
  #####.#####.#.#####.#####.#.#.#.###.#.###.###.#.#.#.###.#.#.#.#.###.#.###.###.###.#.#####.#.###.#.#.#.#.###.###.###.###.#####.#  
  #...#.#.....#.#.......#...#...#.#.#.#.#...#...#.....#.#...#.#.#.....#.#...#...#...#.......................#.#.#.#.........#...#  
  ###.#.###.#.#######.#####.#######.#######.###.###.#.#.###.###.#.#.###.#.###.#.#.#######.#.#.#.###.#.#.#.#####.#.###.#.###.###.#  
  #.......#.#...#.........#.#.#.........#...#...#...#.#.#...#.#.#.#.#...#.#.#.#.#...#.#.#.#.#.#.#...#.#.#...#.#.#...#.#...#.#.#.#  
  ###.#######.#######.###.###.#####.#######.###.#.#####.#.#.###.###.#.#.#.#.#####.###.#.###########.#####.###.#.#.#.#######.#.#.#  
  #.#.#.#.#.#.#.....#...#.#...#.........#.#.#.#.#...#.....#...#.#.#.#.#.#.......#.#...........#.#.#.....#.#.....#.#.#...#.....#.#  
  #.#.#.#.#.#.#####.#.#######.#######.###.###.#.#.#####.#.#.#.#.#.#.###.###.#.###.###.#.###.#.#.#.#############.#.#####.#####.#.#  
  #...#...#.......#.#.#.#...#.#.#.#.#...#.......#...#...#.#.#.#...#.#.#...#.#.#.......#...#.#.........#.#...#.#.....#.#...#.....#  
  ###.###.#.#.#.#.#.#.#.###.#.#.#.#.###.#####.#.#.#######.#.###.#####.#.###.#####.###.#.#.#######.#.#.#.###.#.#.#.###.###.#.#.###  
  #.#...#.#.#.#.#.#.#.#.#.#.....#.........#...#.#.#.#...#.#.....#.......#.....#...#...#.#.#.#.....#.#.....#...#.#.#.......#.#...#  
  #.###.#.#######.#.#.#.#.#.###.#.#####.#######.#.###.#.#.#########.#.#.#.#############.###.###############.#####.#####.#######.#  
  #.#.....#.#.#.#.#...#.#.....#.#.#.......#.#...#.....#.#.......#.#.#.#.#...#...#.#.#.............#...#.#...#.#.#...#...#.......#  
  #.#####.#.#.#.#.###.#.#.#########.#.###.#.###.#######.#######.#.#####.#.#.#.###.#.###.#########.###.#.###.#.#.#.#.###.###.#.#.#  
  #...#.......#.#.#.#...#.#.....#...#...#.....#.#.....#...#.......#.#...#.#.#.#.......#.......#.#.#.......#.#.....#.#.#.#...#.#.#  
  #.#########.#.#.#.#.###.#.#######.###.###.#.#.#.###.#.###.#######.#.###.###.#####.#.#.#######.#.#.#######.#####.###.#.#.###.###  
  #.....#...........#.#.......#.#.....#.#...#.#.#.#.#.....#.....#.......#.......#...#...........#.#.#.#.......#.#.#...#.#.#.....#  
  ###.###.#.#####.#.#.###.#####.###.#######.###.#.#.###.#.#####.#.###.#########.#####.###.###.#####.#.#######.#.#.#.###.###.#.###  
  #.....#.#...#...#.#.....#.....#.#.....#.#.#...#.....#.#.#.....#...#.#.........#.......#...#.#.#...#.#...#.........#.......#...#  
  #.#############.#######.###.###.#.#####.#.###.###.#.###.###.#.###.###.#.###.###.#.#.#.#.#.###.#.###.#.#######.#.#.#######.#####  
  #.....#.#.#.#.#.#...#.#.#.....#.#.....#.......#...#...#.#...#.#.....#.#...#...#.#.#.#.#.#.#.....#.........#...#.#...#.....#...#  
  ###.#.#.#.#.#.#.#.###.#.###.###.#.#######.#####.#########.#######.#.#####.#####.###############.###.###.#######.#.#.#####.#.#.#  
  #.#.#.#.#.#.#...#...#.#.....#...#.#      M     M         K       D T     V     L            #...#...#.#...#.#...#.#.#.#.#...#.#  
  #.#.###.#.#.###.#.###.###.#.###.###      I     E         W       M E     V     D            #.#.###.#.#####.#.#######.#.#.#####  
  #.....#.............#.....#.#.....#                                                         #.#...#.#.#...#.....#.#...#.#...#.#  
  ###.###.#.###.#####.#.###.#######.#                                                         ###.###.#.###.###.###.###.#.#.###.#  
KW........#.#.......#...#.....#.#.#..PO                                                     AR..#.........#.......#...........#.#  
  ###############.###.###.#####.#.#.#                                                         #.#.#.#.###.###.#.#.#.#.#.###.###.#  
  #.....#.#...#...#.#.#.............#                                                         #.#.#.#.#.......#.#...#.#.#...#...#  
  ###.###.#.#######.#################                                                         #.#.#####.#.#####.#.###.#.###.###.#  
VR..........#...#.....#.........#....YB                                                       #.#...#...#.#.#.#.#.#.#.#.#.#.#....RI
  #.#####.#####.###.#.###.#####.#.###                                                         #.#.#####.###.#.###.#.#.###.#.###.#  
  #.#.......#.....#.#.#...#.....#...#                                                         #...#...#.#...#.......#...#.......#  
  #.#.#######.#.#.###.###.###.###.#.#                                                         #####.#######.#############.#.#####  
  #.#.........#.#.#...#.#...#...#.#.#                                                         #.........#.#.#.....#...#.#.#...#..OX
  #####.#######.#####.#.###.###.###.#                                                         #.###.#####.#.#####.#.###.###.###.#  
  #...#.#.#.#.#...............#.....#                                                       RI....#.#.......#.......#.....#...#.#  
  #.#####.#.#.#################.#.###                                                         #.###.#.#####.###.#.#.#.###.#####.#  
  #.............#.....#.......#.#...#                                                         #.#.#...#.....#.#.#.#...#.........#  
  #.#.###.#####.#.#.#.#.#####.#######                                                         #.#.#.#.#.#####.###.###.#######.#.#  
  #.#.#.....#.....#.#...#.....#.#....OL                                                       #...#.#.#.............#.#.#.#.#.#.#  
  #.###.#.#####.#.#.#####.#####.###.#                                                         #########################.#.#.#####  
  #...#.#...#.#.#.#...#.....#...#.#.#                                                         #.................#.#.........#.#.#  
  #.#####.#.#.#.#.#.#.#####.#####.#.#                                                         ###.###.###.#.###.#.###.#.###.#.#.#  
YB....#.#.#.#...#.#.#...#...........#                                                       DJ......#...#.#.#.......#.#.#.#...#..YF
  #####.#######.#.#.#.#####.#########                                                         ###.#########.###.###.#.###.#.###.#  
  #.....#.......#.#.#.#.....#.....#.#                                                         #.........#...#...#...#...#.....#.#  
  #.###.#####################.###.#.#                                                         ###.#####.#.###.###.###.###.###.#.#  
  #.#...#...#.#.#.#...#.......#......OX                                                       #.#...#.#.#.#...#.........#.#......AA
  #.#.#####.#.#.#.#.#####.#######.###                                                         #.#.###.#######.#.#.###.###########  
PO..#.#...#.#.......#.#.#...#.#.....#                                                         #.#...#.#.....#.#.#.#.#.#.......#..ME
  ###.#.#.#.#####.#.#.#.###.#.#######                                                         #.#####.#.#########.#.#####.###.#.#  
  #.#...#.........#.........#...#.#.#                                                         #.#...#.#.#.#.#...#.#.#.#.....#.#.#  
  #.#########################.###.#.#                                                         #.###.#.#.#.#.###.#.#.#.#####.#.#.#  
UH..#...................#.......#...#                                                         #.#.#.....#.#...#.#.#...#...#.#.#.#  
  #.#.#.###.#.#.#.#.###.#.###.#.#.#.#                                                         #.#.#.#####.#.###.#####.#.#.#.#.#.#  
  #.#.#...#.#.#.#.#...#...#.#.#.#.#.#                                                       LM..........................#...#...#  
  #.#.#######.#####.#####.#.###.#.#.#                                                         ###################################  
  #...#.#.#.#.#.#.....#.#...#.#...#..VR                                                       #...#.#...........#.......#........JI
  #.#.#.#.#.###.#####.#.#.###.#######                                                         #.#.#.#.###.###.#.#.###.###.###.###  
  #.#.#...#.......#...#...#...#.....#                                                       PG..#...#.#.....#.#.....#.#.....#...#  
  ###.#.#.#.###.#########.###.#.###.#                                                         #####.#.###.#####.###.#####.###.#.#  
  #.#.#.#...#.......#...#.#...#.#...#                                                         #.....#...#.#.#...#.........#...#.#  
  #.###.#####.#.#####.#####.#.#.#.###                                                         #.#.###.#####.#######.#####.#####.#  
MI......#.....#.#...........#.#.#.#.#                                                         #.#.......#.#.#...#.#...#.#...#.#.#  
  ###.#####.#######.###.#####.#.#.#.#                                                         #####.#.###.#.#.###.#####.###.#.###  
  #...#...............#.#.#.....#....MD                                                     JI..#...#.#...............#...#...#..ZH
  ###.#####.#############.###.###.###                                                         #.#########.#####.###.###.#.#####.#  
  #.#.#...#.#.#.#...#.....#...#.#.#.#                                                         #.#.............#.#.#.#.#.#.....#.#  
  #.###.#####.#.#.#####.#.#####.###.#                                                         #.#.#####.#.###.###.#.#.#.#####.#.#  
PG..#...#.............#.#...#.#.#.#.#                                                         #.#...#...#.#.#.#.......#.....#...#  
  #.#.#.###.###.#####.#.#.###.#.#.#.#                                                         #.#.#####.###.#####.###.#####.#.#.#  
  #...#.......#.#.......#............YU                                                       #.......#.#.#...#.....#.......#.#.#  
  #.#.#.#.#.#####.#.#.#.#####.#.#.#.#                                                         ###.#######.###.###.###.###.#.###.#  
  #.#.#.#.#...#...#.#.#...#.#.#.#.#.#                                                         #...#.........#.....#.....#.#.#...#  
  #.###.#########.#.#.###.#.#####.#.#        H       U Z             S     Y       F   O      #.#.#.###.#.###.###.###.###.#####.#  
  #.#.#.....#.#...#.#.#.#.....#...#.#        V       H H             N     F       N   R      #.#.....#.#.#.#.#...#...#.......#.#  
  ###.#.#.#.#.#.#.#####.#.#.#.#.#############.#######.#.#############.#####.#######.###.#########.#########.#######.###.###.###.#  
  #.....#.#.#.#.#...#.....#.#.#.#...#.#.#.#.....#.#...#...........#.#.#.#.....#...#.#...#.#...#.........#.........#...#...#...#.#  
  ###.#.#####.###.#######.#######.###.#.#.#.#.#.#.#.#########.###.#.#.#.#.#####.#.#.#.###.#.#####.###.#.#.#########.#.#.#.#.#.###  
  #...#.......#.#...#.#...#.................#.#.#.#...#.......#.#.#...#...#.#...#...#.#...#...#.#...#.#.......#.#...#.#.#.#.#.#.#  
  ###.#.#######.#.###.#.#####.#.#######.#.#######.###.#.#######.#####.#.###.###.#####.#.#.#.###.#####.###.#####.###.###.###.#.#.#  
  #.#.#...#.#.....#.#.#.#.....#...#.#...#.#...........#.......#.....#.#.....#...#.#.#...#...#...#...#.#.........#.....#...#.#...#  
  #.#####.#.###.###.#.###.#.###.###.###.###.###.#######.###.#.#.###.#.###.#####.#.#.#.#.#.#.###.#.#####.#.#####.#.#.###.#####.#.#  
  #.........#.#.#.#.#.#...#.#.....#.......#.#...#...#.....#.#.#.#.....#.....#.#.#...#.#.#.#...#.......#.#...#.#.#.#.#.#.....#.#.#  
  #.#.###.#.#.###.#.#.#.#.#####.#####.#.#.###.#.###.#########.#.#.#####.#####.#.#.#.#######.###.#####.#.#.#.#.#.###.#.#.#######.#  
  #.#...#.#...#.........#...#...#.#...#.#.#...#...........#...#.#.#...#.....#.....#...#...#.#.......#.#.#.#...#.#.....#.#.#...#.#  
  #.###.###.#######.#.#.#.#####.#.#####.#######.#####.#######.#.#.#.#.#####.#######.###.###.#.###.#####.#########.#.#####.###.#.#  
  #...#...#...#.#...#.#.#.#...#.#.#.#.........#.#.....#.....#.#.#.#.#.....#.....#.....#.........#...#.#.........#.#.........#...#  
  #.###.###.###.###.#####.#.#.###.#.#.#.###.#.#.#.#######.#.#.#.###.#.#######.#.#.#####.#####.#######.###.###.#####.#############  
  #...#.#.#.#.........#...#.#...#...#.#.#.#.#.#.#.....#...#...#.....#.#.#.#...#.#...#.....#.#.#...#.....#.#.#.#...........#.....#  
  #.###.#.###.#####.#.###.###.###.#.#####.###.#.#.###.#.#######.#.###.#.#.#.#####.#######.#.#.###.###.#####.#####.#.#########.###  
  #...#...#.#.#.#...#...#...#.#...#.#.........#.#.#...#.......#.#.#.......#.#.#.....#.......#...#.#.....#.....#.#.#.............#  
  #.#.#.#.#.###.#.#.#.###.#.#.###.#########.#########.###.#.#.#####.#####.#.#.#.###.#####.#.#####.#.###.#.#.###.#.#######.#.#####  
  #.#.#.#.#...#.#.#.#.#.#.#.#.....#.#.#.#.....#.......#...#.#...#.#...#.#.#...#.#.#.#.#...#.#...#.....#...#.#.........#.#.#.....#  
  #.#######.###.#.###.#.#.#####.#.#.#.#.#####.#####.#.###.###.###.###.#.#####.#.#.###.#####.#.#####.#####.#######.###.#.#######.#  
  #.#...#.........#...#...#.....#.....#.#...#...#...#.#...#...#...#.#...#.....#.#...#...#.........#.....#.#...#.#.#.#.........#.#  
  ###.#.#.#######.#######.#####.#.#.###.#.#.#.###.#.#.###.#.#.###.#.#.###.###.#.#.#####.###.#####.#.#.#.#.###.#.#.#.#.#.#.#.#####  
  #...#.#.#.....#...#...#.#.....#.#...#...#...#...#.#...#.#.#.....#...#.#.#...#.....#...#.......#...#.#.#...#.......#.#.#.#.....#  
  ###.#########.#.###.#############.#.#.###.#.#.#####.#######.#######.#.#####.#.#.#.###.###.###.#####.###.#######.#####.#####.#.#  
  #.....#.#.#.#.......#...........#.#...#.#.#.#.#.#.......#.......#.#.......#.#.#.#.#.#.......#.#.#.#.#.#.#.#...#...#...#...#.#.#  
  ###.###.#.#.#.###############.###.###.#.#######.#.###.#####.#####.#.#######.#####.#.#.###.#.###.#.###.###.#.###.#####.#.#####.#  
  #...............#.........#.....#.#.....#.#.#.#...#...#.....#...#.....#...#.#.....#.....#.#.......#.........#.#...#.#.....#...#  
  ###.###.#.###.###.#.###.#.###.#####.#.#.#.#.#.###.#####.###.###.###.###.###.#.#####.#####.#.#.#####.#####.#.#.#.###.###.#######  
  #...#...#...#...#.#.#...#.....#.#...#.#.......#.....#.#...#.#.#.....#...#...#...#.....#.#.#.#.#.#.#.....#.#...#.#.#.#.......#.#  
  ###.#.###.###.#########.#####.#.#.#.#######.###.#.###.#####.#.#####.#.#.#.###.#####.###.#.#####.#.###.###########.#.#####.###.#  
  #...#.#...#...#.......#.#.#.......#.#.........#.#.....#.....#...#.#.#.#.....#...#...#...#.....#...#.#.#.......#...#.....#.....#  
  #.###.###.#.#.###.###.###.#.#.###########.###.###.#.#.#####.#.###.#.#.#######.#####.#.###.#.###.###.#.#.#######.#.#.#####.#####  
  #.#.#.#...#.#...#.#.....#...#.#.........#...#.#...#.#...#.#...#.....#...#.#.....#.....#...#.....#.#.........#.#.#...#.#.......#  
  ###.#.###.#######.#####.#.#.#.###.#####.###.#.#.#########.#.#.#.#.#.###.#.###.#####.#######.#.###.#.###.#.#.#.#.#.#.#.###.###.#  
  #.....#...#.........#.....#.#...#...#.......#.#...#.........#.#.#.#...#...#.......#.....#...#.........#.#.#.....#.#.....#...#.#  
  #########################################.#####.#######.###########.###.#######.###.###########################################  
                                           F     V       S           L   M       D   D                                             
                                           N     V       N           M   D       J   M                                             '''

def scan_vertical_portals(start_row, grid, portals):
    for i,c in enumerate(grid[start_row]):
        if c.isupper():
            portal = ''.join([grid[start_row][i], grid[start_row + 1][i]])
            tile_y = start_row - 1
            if (tile_y < 0 or grid[tile_y][i] != '.'):
                tile_y = start_row + 2
                if grid[tile_y][i] != '.' : continue
            tile_pos = (i - 2, tile_y - 2)
            if portal in portals:
                portals[portal].append(tile_pos)
            else:
                portals[portal] = [tile_pos]


def scan_horizontal_portals(start_col, grid, portals):
    h, w = len(grid), len(grid[0])
    for i in range(h):
        c = grid[i][start_col]
        if c.isupper():
            portal = ''.join([c, grid[i][start_col + 1]])
            tile_x = start_col - 1 
            if(tile_x < 0 or grid[i][tile_x] != '.'):
                tile_x = start_col + 2
                if grid[i][tile_x] != '.' : continue
            tile_pos = (tile_x - 2, i - 2)
            if portal in portals:
                portals[portal].append(tile_pos)
            else:
                portals[portal] = [tile_pos]

def parse_input(input):
    rows = input.split('\n')
    height, width = len(rows), len(rows[0])
    for i,row in enumerate(rows[2:-2]):
        r = row[2:-2]
        if('# ' in r): # found top left corner of donut hole
            donut_thick = i
            break
    
    char_grid = [tuple(row) for row in rows]
    # Scan portal positions
    portals = {}
    start_rows = [0, donut_thick + 2, height - donut_thick - 4, height - 2] # outer top, inner top, inner botton, outer bottom portals
    start_cols = [0, donut_thick + 2, width - donut_thick - 4, width - 2] # outer left, inner left, inner right, outer right portals
    for start_row in start_rows:
       scan_vertical_portals(start_row, char_grid, portals) 
    for start_col in start_cols:
       scan_horizontal_portals(start_col, char_grid, portals)
    
    # Convert grid into a graph of walkable tiles:
    path_graph = nx.Graph()
    for y, row in enumerate(char_grid[2:-2]):
        for x, c in enumerate(row[2:-2]):
            if c == '.':
                path_graph.add_node((x, y))
                adjacents = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]
                for a in adjacents:
                    if a in path_graph:
                        path_graph.add_edge((x, y), a)
    return path_graph, portals, (width-4, height - 4)

def visualize_path(path_graph, actual_pos = False, weight_labels = False):
    layout = {}
    if (actual_pos):
        for node in path_graph: # Use actual node positions to draw graph. Use 2 first elements of node as 2d coordinates
            layout[node] = np.array([node[0], node[1]])
    else:
        layout = nx.spring_layout(path_graph)
    nx.draw(path_graph, pos = layout)
    if(weight_labels):
        labels = nx.get_edge_attributes(path_graph,'weight')
        nx.draw_networkx_edge_labels(path_graph,pos = layout,edge_labels=labels)
    plt.gca().invert_yaxis()
    plt.show()

# Ideas:
# 1. Convert input text to unweighted graph of all walkable tiles. Portals are placed at thier closest tiles.
# 2. Add edges to connect outer to inner portals
# 3. Find shortest path from AA to ZZ
def part1(input):
    path_graph, portals, _ = input
    # Add edges created by pairs of portals:
    for portal in portals:
        nodes = portals[portal]
        if len(nodes) == 2:
            path_graph.add_edge(nodes[0], nodes[1])

    aa, zz = portals['AA'][0], portals['ZZ'][0]
    shortest_path = nx.shortest_path(path_graph, source=aa, target = zz)
    #visualize_path(path_graph)
    return len(shortest_path) - 1

# Ideas:
# 1. Convert the unweighted graph in Part 1 to weighted graph. Each portal is a node, edge weight is shortest distance between 2 portals
# 2. Try finding shortest path from AA to ZZ
# 3. If not found: create a deeper level, connect inner portals of upper layer to outer portals of lower layer.
# 4. Repeat (2), (3) until path found or max layer exceeeded
def part2(input):
    path_graph, portals, maze_shape = input

    # Separate portals into inner and outer portals
    inner_portals = {}
    outer_portals = {}
    for portal in portals:
       for pos in portals[portal]:
            x, y = pos
            if(x == 0 or y == 0 or x == maze_shape[0] - 1 or y == maze_shape[1] - 1):
                outer_portals[portal] = (x,y)
            else:
                inner_portals[portal] = (x,y)
    
    # Convert unweighted graph of all walkable tiles to weighted graph of portals
    base_weighted_graph= nx.Graph()
    all_portals = list(inner_portals.values()) + list(outer_portals.values())
    for node in all_portals:
        base_weighted_graph.add_node(node)
        
    for node_pair in list(combinations(all_portals, 2)):
        try:
            edge = nx.shortest_path(path_graph, source = node_pair[0], target = node_pair[1])
        except: # no path between 2 portals
            continue
        base_weighted_graph.add_edge(*node_pair, weight = len(edge) - 1)
    
    # Create recursive space, add one layer at a time
    recursive_graph = nx.Graph() # outermost layer
    max_depth = 100 # Control maximum depth of recursive spaces
    depth = 0
    aa, zz = (*outer_portals['AA'], depth), (*outer_portals['ZZ'], depth)
    shortest_path = []
    while (depth < max_depth):
        # Add a layer
        for node in base_weighted_graph.nodes:
            recursive_graph.add_node((*node, depth))
        for node1, node2, data in base_weighted_graph.edges(data=True):
            recursive_graph.add_edge((*node1, depth),(*node2, depth), weight = data['weight'])
        
        # Connect layer to upper layer
        if depth > 0:
            for p in inner_portals:
                upper_port = (*inner_portals[p], depth - 1)  # inner port of the upper layer
                lower_port = (*outer_portals[p], depth) # outer port of the lower layer
                recursive_graph.add_edge(upper_port, lower_port, weight = 1)

        # Try finding path from AA to ZZ of outermost layer:
        try:
            shortest_path =  nx.shortest_path(recursive_graph, source=aa, target = zz)
        except: # no path found, add 1 layer and retry
            print('Depth = {}. Path not found. Adding another layer and retry...'.format(depth))
            depth += 1
            continue
        print('Path found at depth = {}.'.format(depth))
        break
    
    # Calculate total weight of shortest path
    path_length = 0
    for i in range(1, len(shortest_path)):
        edge = recursive_graph.get_edge_data(shortest_path[i], shortest_path[i - 1])
        path_length += edge['weight']

    #visualize_path(recursive_graph, actual_pos = True, weight_labels = True)
    return path_length

if __name__ == "__main__":
    if(exec_test_case == 1):
        input = INPUT_TEST
    else:
        input = INPUT
    input = parse_input(input)

    start_time = datetime.datetime.now() 
    if (exec_part == 1):
        result = part1(input)
    else:
        result = part2(input)
    end_time = datetime.datetime.now() 
    print('Part {} time: {}'.format(exec_part, end_time - start_time))
    print('Part {} answer: {}'.format(exec_part, result))